<AuthorizeView>
<header class="header-container">
        <div class="logo"> <span class="nav-btn">@context.User.Claims.FirstOrDefault(c => c.Type == "TenantName")!.Value</span></div>
    <nav>
        <ul class="nav-links">
            <li>
                <NavLink href="" Match="NavLinkMatch.All">
                    <span class="nav-btn">Home</span>
                </NavLink>
            </li>
            <li>
                <NavLink href="counter">
                    <span class="nav-btn">Counter</span>
                </NavLink>
            </li>
            <li>
                <NavLink class="nav-link" href="tenant/list">
                    <span class="nav-btn">Tenant</span>
                </NavLink>
            </li>
            <li>
                <NavLink class="nav-link" href="store/list">
                    <span class="nav-btn">Store</span>
                </NavLink>
            </li>
        </ul>
    </nav>
    <button @onclick="LogoutClicked">Logout</button>
    <div class="hamburger" id="hamburger">
        <span></span>
        <span></span>
        <span></span>
    </div>
</header>
</AuthorizeView>

@code {
    async Task LogoutClicked()
    {
        var logoutModel = new TokenResponse();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)_authenticationStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(logoutModel);
        _navigationManager.NavigateTo("/identity/account/login", replace: true, forceLoad: true);
    }

}
