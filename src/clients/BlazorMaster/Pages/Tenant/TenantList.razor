@page "/tenant/list"

<h1>Tenant List</h1>
<br/>

<div class="row mb-3">
    <div class="col-md-7">
        <NavLink href="/tenant/create" class="btn btn-sm btn-success mb-2">Create Tenant</NavLink>
    </div>
</div>

@if (Tenants == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid Items="@Tenants" Filterable="true" QuickFilter="@_quickFilter" Hideable="true" ColumnResizeMode="ResizeMode.Column" >
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.TenantTypeCode" Title="Tenant Type Code"  />
            <PropertyColumn Property="x => x.TenantTypeName" />
            <PropertyColumn Property="x => x.TenantTypeName" />
            <PropertyColumn Property="x => x.TenantTypeName" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Href="/tenant/create" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Edit</MudButton>
                        <MudButton OnClick="OnButtonClicked" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error">Delete</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="GetAllTenants" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private List<GetAllTenants> Tenants { get; set; } = new();
    private string _searchString = null!;
    [Inject] private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await GetTenantsAsync();
        StateHasChanged();
    }

    private async Task GetTenantsAsync()
    {
        var response = await _genericService.GetAll(Constants.TenantBaseUrl);

        if (response.IsSuccess)
        {
            Tenants = response.Value.ToList();
        }
        else
        {
            Console.WriteLine("Error Occured");
        }
    }

    private Func<GetAllTenants, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.TenantTypeCode.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.TenantTypeName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    string state = "Message box hasn't been opened yet";


    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");
        state = result == null ? "Canceled" : "Deleted!";
        StateHasChanged();
    }

    // private async void DeletePerson(Person _person)
    // {
    //     var person = _person;
    //     person.IsDeleting = true;
    //     await PersonService.DeletePerson(person.PersonId);
    //     people = await PersonService.GetPeople(null, Page);
    //     StateHasChanged();
    // }

}
