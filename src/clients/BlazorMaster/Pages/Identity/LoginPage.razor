@page "/identity/account/login"

@layout AuthLayout

<EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="User.Email" class="form-control" />
        <ValidationMessage For="@(() => User.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="User.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => User.Password)" />
    </div>
    <div class="input-submit">
        @if(ShowLoadingButton)
        {
            <BlazorMaster.Pages.Components.ButtonLoader />
        }
        else
        {
        <button class="btn btn-secondary" id="submit" type="submit"></button>
        <label for="submit">Sign In</label>              
        }      
    </div>
    <ValidationSummary />
</EditForm>



@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    public bool ShowLoadingButton { get; set; } = false;
    internal LoginDto User { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    public async Task HandleLogin()
    {
        ShowLoadingButton = true;

        // List<CreateTenantDto>? response = await _httpClient.GetFromJsonAsync<List<CreateTenantDto>>("tenant/all");

        var result = await _tokenService.LoginUser(User);
        if (result.Flag)
        {
            string customMessage = $"{result.Flag}{Environment.NewLine}{result.Token}";
            await _js.InvokeVoidAsync("alert", customMessage);

            var customAuthStateProvider = (CustomAuthenticationStateProvider)_authenticationStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new TokenResponse() 
            { 
                Token = result.Token, 
                RefreshToken = result.RefreshToken, 
                RefreshTokenExpiryTime = result.RefreshTokenExpiryTime 
            });

            _navigationManager.NavigateTo("/home/dashboard", forceLoad: true);
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Error");
        }

        ShowLoadingButton = false;
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState!).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
        {
            _navigationManager.NavigateTo("/home/dashboard");
        }
    }
}