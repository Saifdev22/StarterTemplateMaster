@page "/identity/account/login"
@layout AuthLayout

<EditForm Model="User" OnValidSubmit="HandleLogin" Enhance>
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField @bind-Value="User.Email" Variant="Variant.Outlined" InputType="InputType.Email" Label="Email" ErrorText="44" For="@(() => User.Email)" />
            <MudTextField @bind-Value="User.Password" InputType="InputType.Password" Variant="Variant.Outlined" Label="Password" Clearable="true" For="@(() => User.Password)" />
        </MudCardContent>
        <MudCardActions>
            @if (ShowLoadingButton)
            {
                <BlazorMaster.Pages.Components.ButtonLoader />
            }
            else
            {
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="demo-form-button">Register</MudButton>
            }
        </MudCardActions>
    </MudCard>
    <ValidationSummary />
</EditForm>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    public bool ShowLoadingButton { get; set; } = false;
    internal LoginDto User { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    public async Task HandleLogin()
    {
        ShowLoadingButton = true;

        var result = await _tokenService.LoginUser(User);
        if (result.Flag)
        {
            string customMessage = $"{result.Flag}{Environment.NewLine}{result.Token}";
            await _js.InvokeVoidAsync("alert", customMessage);

            var customAuthStateProvider = (CustomAuthenticationStateProvider)_authenticationStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new TokenResponse() 
            { 
                Token = result.Token, 
                RefreshToken = result.RefreshToken, 
                RefreshTokenExpiryTime = result.RefreshTokenExpiryTime 
            });

            _navigationManager.NavigateTo("/home/dashboard", forceLoad: true);
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Error");
        }

        ShowLoadingButton = false;
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState!).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
        {
            _navigationManager.NavigateTo("/home/dashboard");
        }
    }
}