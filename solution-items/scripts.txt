System

Add-Migration -Name InitialCreate -Context SystemDbContext -OutputDir Common/Database/Migrations -Project System.Infrastructure -StartupProject Starter.API
Update-Database -Context SystemDbContext -Project System.Infrastructure -StartupProject Starter.API 

Parent

Add-Migration -Name InitialCreate -Context ParentDbContext  -OutputDir Common/Database/Migrations  -Project Parent.Infrastructure -StartupProject Starter.API
Update-Database -Context ParentDbContext -Project Parent.Infrastructure -StartupProject Starter.API 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


dotnet dev-certs https -ep C:\Users\saifd\Desktop\certs\.aspnet\https\aspnetapp.pfx -p 25122000
dotnet dev-certs https --trust

docker exec -it Starter.SQLServer sqlcmd -S host.docker.internal -U sa -P 25122000SK
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Project Reference

Modules

Domain => Common.Domain
Infrastructure => Common.Infrastructure, Application, Presentation
Application => Common.Application, Domain, IntegrationEvents
Presentation => Common.Presentation, Application

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

docker-compose -f docker-compose.resources.yml up -d postgres.database
docker-compose up -d
docker-compose down

--------------------------------------------------------------------------------------------------------------------------
Creating Endpoint

1. Create Model (Domain)

2. Add Model To DbContext

3. Configure Model

4. Add CQRS

5. Add Endpoint

--------------------------------------------------------------------------------------------------------------------------

UserM
public virtual IReadOnlyCollection<UserRoleM>? UserRoles { get; set; } = [];

RoleM
public IReadOnlyCollection<UserRoleM> UserRoles { get; set; } = [];

TenantM
    public virtual TenantTypeM? TenantType { get; set; }
    public virtual ICollection<UserM>? Users { get; }

    TenantTypeM
        public virtual ICollection<TenantM>? Tenants { get; }